new stdout(`rho:io:stdout`), 
    stdoutAck(`rho:io:stdoutAck`),
    regInsert(`rho:registry:insertArbitrary`), 
    regLookup(`rho:registry:lookup`),
    //regInsertSigned(`rho:registry:insertSigned:ed25519`)
    CoinFaucet, HashWallet, MakeCoinMint,
    NonNegativeNumber, MakeMint_int2NN, BasicWallet,
    mainCoinFaucetURI
                                                 in {

    CoinFaucet!(*mainCoinFaucetURI)
    
    |

    contract CoinFaucet(return) = {
        new this, lookupIndentifier, ack,
            allCoins, allCoinAwards in {
         
            allCoins!({}) 
            |
            allCoinAwards!({}) 
            |            
            regInsert!(bundle+{*this}, *lookupIndentifier) 
            |        
            for(@{uri /\ Uri} <- lookupIndentifier) { return!(uri) } 
                        
            |
            
            contract this(@"getCoinName", @coin, result) = { 
                for(@coins <- allCoins){
                    if (coins.contains(coin ++ "-name")) {
                        result!(coins.get(coin ++ "-name"))
                    } else {
                        result!("ERROR")
                    }
                    |
                    allCoins!(coins)
                }
            }
            
            |
            
            contract this(@"getCoinSymbol", @coin, result) = {  
                for(@coins <- allCoins){
                    if (coins.contains(coin ++ "-symbol")) {
                        result!(coins.get(coin ++ "-symbol"))
                    } else {
                        result!("ERROR")
                    }
                    |
                    allCoins!(coins)
                }
            }
            
            |
            
            contract this(@"getAllCoins", result) = {   
                for(@coins <- allCoins){
                    result!(coins)
                    |
                    allCoins!(coins)
                }
            }

            |
            
            contract this(@"createCoin", @coin, @name, @symbol, result) = {
                for(@coins <- allCoins){
                    if (coins.contains(coin ++ "-name")) {
                        allCoins!(coins)
                        |
                        result!("EXISTS")
                    } else {
                        allCoins!(coins.union({coin ++ "-name": name, coin ++ "-symbol": symbol}))
                        |
                        MakeCoinMint!(coin, *ack)
                        |
                        for(@mint <- ack){ result!(mint) }
                    }
                }
            }

            |
            
            contract this(@"createCoinAward", @purse, @saltedHash, result) = {  
                for(@awards <- allCoinAwards){
                    // Make sure the existing coin awards does not already contain the saltedHash
                    if (awards.contains(saltedHash)) {
                        stdout!("ERROR - Coin Award with this saltedHash already exists")
                        |
                        allCoinAwards!(awards)
                        |
                        result!({"status":"ERROR", "output":"Coin Award with this saltedHash already exists"})
                    } else {
                        // Create a HashedWallet
                        new hashWallet, registryIdentifier in {
                            HashWallet!(purse, "keccak256", saltedHash, *hashWallet)
                            |
                            for(@wallet <- hashWallet) {
                                // Add the HashedWallet to the Registry and get back its ID
                                regInsert!(wallet, *registryIdentifier) 
                                |
                                for(@{uri /\ Uri} <- registryIdentifier) {
                                    allCoinAwards!(awards.set(saltedHash, uri))
                                    |
                                    // Return the HashedWallet ID
                                    result!({"status":"SUCCESS","output":uri})
                                }
                            }
                        }
                    }
                }
            }
            
            |
    
            contract this(@"redeemCoinAward", @saltedHash, @salt, result, coinAwardPurse) = {
                stdout!("DEBUG - CoinFaucet->redeemCoinAward")
                |
                for(@awards <- allCoinAwards){
                    // Make sure the existing coin award exists for the saltedHash
                    if (not awards.contains(saltedHash)) {
                        stdout!("ERROR - Coin Awards does not contain the provided salted-Hash")
                        |
                        allCoinAwards!(awards)
                        |
                        result!({"status":"ERROR", "output":"Coin Awards does not contain the provided salted-Hash"}) | coinAwardPurse!(Nil)
                    } else {
                        new registryID, awardWallet, awardAmount, redeemPurseOut, redeemResultOut in {
                            // Get the registry ID for the salted hash
                            registryID!(awards.get(saltedHash))
                            |
                            for(@idForHash <- registryID){
                                stdout!("DEBUG - retrieved the registry ID for the requested saltedHash")
                                |
                                regLookup!(idForHash, *awardWallet)
                                |
                                for(hashWallet <- awardWallet){
                                    stdout!("DEBUG - retrieved the wallet from the registry by ID")
                                    |
                                    hashWallet!("getBalance", *awardAmount)
                                    |
                                    for(@amount <- awardAmount){
                                        stdout!("DEBUG - got the award amount held in the wallet")
                                        |
                                        hashWallet!("transfer", amount, salt, *redeemPurseOut, *redeemResultOut)
                                        |
                                        for(@redeemPurse <- redeemPurseOut; @redeemResult <- redeemResultOut){
                                            stdout!("DEBUG - completed the wallet redeem request")
                                            |
                                            if (redeemResult == "Success"){
                                                stdout!("DEBUG - Successfully withdrew the coin award")
                                                |
                                                allCoinAwards!(awards.delete(saltedHash))
                                                |
                                                result!({"status":"SUCCESS", "output":"Successfully withdrew the coin award"}) | coinAwardPurse!(redeemPurse)
                                            } else {
                                                stdout!("ERROR - Failed to withdraw the coin award")
                                                |
                                                allCoinAwards!(awards)
                                                |
                                                result!({"status":"ERROR", "output":"Failed to withdraw the coin award"}) | coinAwardPurse!(Nil)
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    |
    
    contract MakeCoinMint(@coinID, return) = {
        new thisMint, lookupIndentifier, totalSupplyCh, internalMakePurse, decr in {
            contract thisMint(@"makePurse", @init, return) = {
                new balanceCh in {
                    MakeMint_int2NN!(init, *balanceCh) 
                    |
                    for(@balance <- balanceCh) {
                        internalMakePurse!(balance, *return)
                        |
                        if(init > 0){
                            for(@totalSupply <- totalSupplyCh) {
                                totalSupplyCh!(totalSupply + init)
                            }
                        }
                    }
                }
            } 
            
            |
            
            totalSupplyCh!(0)
                
            |
            
            regInsert!(bundle+{*thisMint}, *lookupIndentifier) 
          
            |
        
            for(@{uri /\ Uri} <- lookupIndentifier) {
                stdout!(["DEBUG - CoinMint lookup identifier = ", uri])
                |
                return!(uri)
            }
            
            |
            
            contract thisMint(@"getTotalSupply", return) = {
                for(@totalSupply <- totalSupplyCh) {
                    totalSupplyCh!(totalSupply) | return!(totalSupply)
                }
            } 
            
            |
            
            contract internalMakePurse(balance, return) = {
                //balance must be a name that NonNegativeNumber contract is listening on
                new thisPurse in {
                    contract thisPurse(@=*decr, @amount, success) = { balance!("sub", amount, *success) } |
                    contract thisPurse(@"getCoinID", return) = { return!(coinID) } |
                    contract thisPurse(@"getBalance", return) = { balance!("value", *return) } |
                    contract thisPurse(@"sprout", return) = { thisMint!("makePurse", 0, *return) } |
                    contract thisPurse(@"split", @amount, return) = {
                        new destPurseCh, successCh in {
                            thisPurse!("sprout", *destPurseCh) 
                            | 
                            for(destPurse <- destPurseCh) {
                                destPurse!("deposit", amount, *thisPurse, *successCh) 
                                |
                                for(@success <- successCh) {
                                    if (success) {
                                        return!([*destPurse])
                                    } else {
                                        return!([])
                                    }
                                }
                            }
                        }
                    } |
                    contract thisPurse(@"deposit", @amount, src, success) = {
                        new result in {
                            src!(*decr, amount, *result) //call src decr function.
                            |
                            for(@decrSuccess <- result) {
                                if (decrSuccess) {
                                    balance!("add", amount, *success) // add transferred amount to this purse
                                } else {
                                    success!(false) 
                                }
                            }
                        }
                    } |
                    return!(bundle+{*thisPurse})
                }
            } 
        }
    }
    
    |
    
    contract HashWallet(purse, @algorithm, @saltedHash, return) = {
        new hashCheckCh in {
            match algorithm {
                "sha256" => {
                    hashCheckCh!(["sha256Hash"])
                }
                "keccak256" => {
                    hashCheckCh!(["keccak256Hash"])
                }
                "blake2b256" => {
                    hashCheckCh!(["blake2b256Hash"])
                }
                _ => {
                    hashCheckCh!([])
                }
            } 
            
            |
            
            for(@maybeHashCheck <- hashCheckCh) {
                match maybeHashCheck  {
                    []             => { return!(Nil) }
                    [hashCheck]    => {
                        new hashWallet, checkHash in {
                            
                            contract checkHash(@salt, return) = {
                                new coinIDOut, hashOut in {
                                    purse!("getCoinID", *coinIDOut)
                                    |
                                    for(@coinID <- coinIDOut) {
                                        @hashCheck!([coinID, salt].toByteArray(), *hashOut)
                                        |
                                        for(@hash <- hashOut){
                                            if (hash == saltedHash){ return!(true)   
                                            } else { return!(false) }
                                        }
                                    }
                                }
                            }
                            
                            |
                            
                            contract hashWallet(@"getBalance", return) = {
                                purse!("getBalance", *return)
                            } 
                            
                            |
                            
                            contract hashWallet(@"deposit", @amount, @src, success) = {
                                purse!("deposit", amount, src, *success)
                            } 
                    
                            |
                            
                            contract hashWallet(@"transfer", @amount, @salt, destination, status) = {
                                stdout!("DEBUG - HashWallet.trasfer")
                                |
                                new checkHashResult in {
                                    checkHash!(salt, *checkHashResult) 
                                    | 
                                    for(@hashIsCorrect <- checkHashResult) {
                                        if (hashIsCorrect) { 
                                            new splitResultCh in {
                                                purse!("split", amount, *splitResultCh) 
                                                |
                                                for(@splitResult  <- splitResultCh) {
                                                    match splitResult {
                                                        []        => { destination!(Nil) | status!("Overdraft") }
                                                        [payment] => { destination!(payment) | status!("Success") }
                                                    }
                                                }
                                            }
                                        } else { 
                                            destination!(Nil) | status!("Invalid salt for hashed wallet") 
                                        }
                                    }
                                }
                            } 
                            
                            |
                            
                            return!(*hashWallet)
                        }
                    }
                }
            }
        }
    }
    
    |
    
    
    
    
    
    
    // START INTEGRATION TESTS
    new coinFaucet, returnCoinFaucetURI,
        beerTokenMint, returnBeerTokenMintURI, 
        createdAwardPurseOut, coinAwardHashOut, coinAwardWalletResultOut,
        redeemedAwardPurseResultOut, redeemedAwardPurseOut,
        receiverWalletOut, receiverWalletHashOut,
        
        showBalance, ack in {
            
        
        contract showBalance(@walletName, wallet) = {
            new walletBalance in {
                wallet!("getBalance", *walletBalance)
                |
                for(@balance <- walletBalance){
                    stdout!(["TEST - wallet balance = ", balance, walletName, *wallet])
                }
            }
        }
        
        |
        
        CoinFaucet!(*returnCoinFaucetURI)
        |
        for(@coinFaucetURI <- returnCoinFaucetURI){
            regLookup!(coinFaucetURI, *ack)
            |
            for(coinFaucet <- ack){
                coinFaucet!("createCoin", "beertoken", "Beer Token", "BRTK", *returnBeerTokenMintURI)
                |
                for(@beerTokenMintURI <- returnBeerTokenMintURI){
                    regLookup!(beerTokenMintURI, *ack)
                    |
                    for(beerTokenMint <- ack){
                        beerTokenMint!("makePurse", 1, *createdAwardPurseOut)
                        |
                        for(@createdAwardPurse <- createdAwardPurseOut){
                            @"keccak256Hash"!(["beertoken", "123"].toByteArray(), *coinAwardHashOut)
                            |
                            for(@coinAwardHash <- coinAwardHashOut){
                                stdout!(["TEST - coinAward hash = ", coinAwardHash])
                                |
                                coinFaucet!("createCoinAward", createdAwardPurse, coinAwardHash, *coinAwardWalletResultOut)
                                |
                                for(@coinAwardWalletResult <- coinAwardWalletResultOut){
                                    if(coinAwardWalletResult.get("status") == "SUCCESS"){
                                        stdout!(coinAwardWalletResult.get("output"))
                                        |
                                        regLookup!(coinAwardWalletResult.get("output"), *ack)
                                        |
                                        for(@coinAwardWallet <- ack){
                                            showBalance!("coinAwardWallet", coinAwardWallet)
                                            |
                                            coinFaucet!("redeemCoinAward", coinAwardHash, "123", *redeemedAwardPurseResultOut, *redeemedAwardPurseOut)
                                            |
                                            for(@redeemedAwardPurseResult <- redeemedAwardPurseResultOut; @redeemedAwardPurse <- redeemedAwardPurseOut) {
                                                if(redeemedAwardPurseResult.get("status") == "SUCCESS"){
                                                    stdout!(["TEST - redemption result =", redeemedAwardPurseResult.get("output")])
                                                    |
                                                    @"keccak256Hash"!(["beertoken", "abc"].toByteArray(), *receiverWalletHashOut)
                                                    |
                                                    for(@receiverWalletHash <- receiverWalletHashOut){
                                                        stdout!(["TEST - receiverWallet hash = ", receiverWalletHash])
                                                        |
                                                        HashWallet!(redeemedAwardPurse, "keccak256", receiverWalletHash, *receiverWalletOut)
                                                        |
                                                        for(@receiverWallet <- receiverWalletOut){
                                                            showBalance!("receiverWallet", receiverWallet)
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    // END INTEGRATION TESTS
    
    |
    
    
    
    
    
    
    contract NonNegativeNumber(@init, return) = {
        new this, valueStore in {
            contract this(@"add", @x, success) = {
                if (x >= 0) {
                    for(@v <- valueStore){
                        if (v + x > v) {
                            valueStore!(v + x) | success!(true)
                        } else {
                            //overflow
                            valueStore!(v) | success!(false)
                        }
                    }
                } else {
                    success!(false)
                }
            } 
            
            |
            
            contract this(@"sub", @x, success) = {
                if (x >= 0) {
                    for(@v <- valueStore) {
                        if (x <= v) {
                            valueStore!(v - x) | success!(true)
                        } else {
                            valueStore!(v) | success!(false)
                        }
                    }
                } else {
                    success!(false)
                }
            } 
            
            |
            
            contract this(@"value", return) = {
                for(@v <- valueStore) {
                    valueStore!(v) | return!(v)
                }
            } 
            
            |
            
            return!(bundle+{*this}) 
            
            |
            
            match init >= 0 {
                true => { valueStore!(init) }
                _ => { valueStore!(0) } //Initial balance is zero if given is negative
            }
        }
    }
    
    |
    
    contract MakeMint_int2NN(@x, return) = {
        new nnCh in {
            NonNegativeNumber!(x, *nnCh)
            | 
            for(@nn <- nnCh) {
                return!(nn)
            }
        }
    } 
    
    |
    
    contract BasicWallet(purse, @algorithm, @pk, return) = {
        new cryptoVerifyCh in {
            match algorithm {
                "ed25519" => {
                    cryptoVerifyCh!(["ed25519Verify"])
                }
                "secp256k1" => {
                    cryptoVerifyCh!(["secp256k1Verify"])
                }
                _ => {
                    cryptoVerifyCh!([])
                }
            } 
            
            |
            
            for(@maybeCryptoVerify <- cryptoVerifyCh) {
                match maybeCryptoVerify {
                    []             => { return!([]) }
                    [cryptoVerify] => {
                        new basicWallet, verify, nonceCh in {
                            nonceCh!(-1) 
                            
                            |
                            
                            contract verify(@nonce, @amount, @retCh, @sig, return) = {
                                for(@prevNonce <- nonceCh) {
                                    if (nonce == (prevNonce + 1)) {
                                        new result, hashOut in {
                                            @"blake2b256Hash"!([nonce, amount, retCh].toByteArray(), *hashOut) 
                                            |
                                            for(@hash <- hashOut) {
                                                @cryptoVerify!(hash, sig.hexToBytes(), pk.hexToBytes(), *result) 
                                                |
                                                for(@r <- result) {
                                                    if (r) { nonceCh!(nonce) | return!(true) }
                                                    else { nonceCh!(prevNonce) | return!(false) }
                                                }
                                            }
                                        }
                                    } else {
                                        nonceCh!(prevNonce) | return!(false)
                                    }
                                }
                            } 
                            
                            |
                            
                            contract basicWallet(@"getNonce", return) = {
                                for(@nonce <- nonceCh) {
                                    nonceCh!(nonce) | return!(nonce)
                                }
                            } 
                            
                            |
                            
                            contract basicWallet(@"getBalance", return) = {
                                purse!("getBalance", *return)
                            } 
                            
                            |
                            
                            contract basicWallet(@"deposit", @amount, @src, success) = {
                                purse!("deposit", amount, src, *success)
                            } 
                            
                            |
                            
                            contract basicWallet(@"transfer", @amount, @nonce, @sig, destination, status) = {
                                new verifyResult in {
                                    verify!(nonce, amount, *destination, sig, *verifyResult) 
                                    | 
                                    for(@verified <- verifyResult) {
                                        if (verified) { 
                                            new splitResultCh in {
                                                purse!("split", amount, *splitResultCh) 
                                                |
                                                for(@splitResult  <- splitResultCh) {
                                                    match splitResult {
                                                        []        => { status!("Overdraft") }
                                                        [payment] => { destination!(payment) | status!("Success") }
                                                    }
                                                }
                                            }
                                        } else { status!("Invalid signature or nonce") }
                                    }
                                }
                            } 
                            
                            |
                            
                            return!([bundle+{*basicWallet}])
                        }
                    }
                }
            }
        }
    }
    
}